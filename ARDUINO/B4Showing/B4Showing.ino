#include <talkie.h>
#include <SoftwareSerial.h> // 시리얼 통신을 위한 라이브러리 선언
#include <SPI.h>
#include <MFRC522.h>

const int led = 8;
Talkie voice;

#define RST_PIN   9                            // reset핀은 9번으로 설정
#define SS_PIN    10                           // SS핀은 10번으로 설정
                                               // SS핀은 데이터를 주고받는 역할의 핀( SS = Slave Selector )
#define RX_PIN A4
#define TX_PIN A5                                            
MFRC522 mfrc(SS_PIN, RST_PIN);                 // MFR522를 이용하기 위해 mfrc객체를 생성해 줍니다.                       
SoftwareSerial BT(RX_PIN,TX_PIN); // tx :4  rx :5  
String myString ="";
//char myChar = "";
//주변에 임산부가 있어요 자리를 비켜주세요
const uint8_t pregnentNear[] PROGMEM = {0x00,0x80,0x80,0xEF,0x9C,0x09,0xB0,0xA5,0x48,0xE3,0x51,0x9D,0x0E,0x57,0xD7,0x43,0x80,0x63,0x5A,0x4A,0x1D,0x33,0x19,0x7C,0x33,0x6D,0x89,0x13,0x44,0x66,0xAB,0xB3,0xDD,0xCA,0x12,0x8C,0xA8,0x4D,0xC5,0xA6,0x47,0x34,0xB1,0xDB,0x54,0xE2,0x1D,0xC9,0xA6,0x0A,0x11,0x69,0xD2,0x64,0x9A,0xAB,0x54,0xB4,0x8E,0x91,0xC0,0x0F,0xA3,0xB0,0xDA,0x4D,0x20,0xA5,0x5B,0x45,0xEA,0x2E,0xC1,0xD8,0x1E,0x25,0xAD,0x7C,0x04,0xA7,0x7B,0x94,0xB5,0xF1,0x15,0x97,0xEC,0x55,0x8F,0x09,0xD7,0x29,0x8A,0x57,0xB5,0xC9,0x58,0x5B,0xA8,0x5A,0xF5,0x1A,0x71,0x6D,0xA4,0x29,0xD9,0x6B,0xA8,0xB1,0x8C,0x46,0xEC,0xAD,0x81,0x24,0x1D,0xB2,0xE4,0xB3,0x05,0x94,0x74,0x49,0x54,0xCF,0x05,0x69,0x92,0x20,0x82,0xD7,0x85,0xA5,0x49,0x9C,0x08,0xBE,0x3B,0xB5,0x66,0x09,0x02,0xF8,0xE1,0xAA,0x9E,0x3A,0x08,0x38,0x75,0x97,0x69,0xE2,0xC4,0x36,0x29,0xE1,0x46,0x4E,0x1B,0xED,0x6C,0x54,0x88,0x36,0x3D,0xB4,0xF3,0x11,0x26,0xD6,0xE4,0x30,0xDE,0x95,0xAB,0xE8,0x92,0xC1,0xF1,0xD0,0x69,0x12,0x73,0x0C,0x07,0x7E,0x9B,0x84,0x47,0x55,0x3C,0xF8,0x21,0xDC,0x61,0x4D,0xF0,0xE0,0x97,0xB2,0x87,0x13,0x24,0x80,0xBF,0x49,0x61,0x72,0x82,0xC8,0xB2,0x7B,0xB4,0x47,0x6E,0x12,0x1B,0x6A,0xB9,0xA4,0xA4,0xC8,0x6C,0x8A,0xD7,0x82,0x12,0xA3,0x81,0x27,0x51,0x0D,0x49,0x82,0xE8,0x9C,0x54,0xB8,0xC5,0x3E,0x82,0x0F,0x95,0xE6,0xD4,0xE4,0x08,0x21,0x56,0xA8,0x52,0x9D,0x23,0x86,0xD0,0xCE,0x2A,0x75,0x9A,0xA4,0xFD,0x04,0x89,0xD7,0x6D,0x22,0xF3,0x3B,0x8C,0xDE,0xA4,0x89,0x4C,0xCF,0x09,0x68,0x9B,0x22,0xC2,0x7A,0xCB,0x64,0x73,0x92,0xC8,0x55,0xED,0x14,0xC5,0x0E,0x5A,0x93,0x64,0x19,0xDC,0x18,0x01,0x43,0x9B,0x21,0xA0,0x5B,0x4B,0x87,0x77,0x6B,0x11,0xC6,0x71,0x9C,0x06,0x56,0x97,0x91,0x25,0x52,0x3A,0xF8,0x24,0xD6,0x96,0xCC,0x98,0xE0,0x8B,0x9A,0x79,0x5C,0xE5,0x80,0x6F,0x64,0x1E,0x49,0x9D,0x0B,0xE6,0x39,0x72,0x46,0x0D,0x1E,0xC8,0xD7,0x08,0x55,0x3A,0xF8,0xB0,0x6C,0x23,0x7A,0x25,0x12,0x80,0xEF,0x0C,0x9E,0x53,0x82,0xC7,0x43,0x95,0x89,0xC4,0x39,0x9E,0xF7,0xD1,0x2E,0x9C,0xE4,0xB8,0xD1,0x47,0x99,0x50,0x9C,0xEB,0x5E,0xF7,0x78,0x31,0x5A,0x2A,0x53,0x9C,0x15,0xC4,0x68,0x69,0x84,0x75,0x83,0xEF,0xBC,0xA4,0x91,0xCC,0x25,0x3E,0xA8,0x16,0xEE,0x59,0x1B,0x00,0x00,0x00,0x01,0x5D,0xB9,0x37,0xA3,0x29,0xCD,0x14,0xB5,0x7D,0x44,0xE7,0xCA,0x59,0xAD,0xC9,0x11,0x83,0x0F,0x67,0xD5,0x39,0x47,0x56,0x7E,0x9C,0xCC,0x27,0x27,0x19,0xE6,0x2D,0x35,0xAD,0xD2,0x44,0xE2,0x67,0x8D,0xB5,0xEE,0x10,0x99,0xEE,0x0D,0xE6,0xA6,0x45,0x62,0xA6,0xB6,0x1C,0x9B,0x0E,0xDE,0x88,0xE8,0x0E,0x71,0x72,0xB8,0xC0,0x6C,0xAA,0xC8,0xE9,0xE1,0x02,0xF7,0xC9,0x20,0xA7,0x87,0xF5,0xC2,0x27,0x9D,0xDC,0x0D,0x4E,0xEA,0x1A,0x77,0x4E,0x63,0x78,0xB8,0x3B,0x25,0xA9,0x0D,0x80,0xE3,0xBA,0x75,0x63,0xB1,0x3A,0x85,0xB3,0xB4,0xBA,0x3A,0x6A,0x36,0x1E,0xB6,0xDF,0x22,0x49,0x3C,0x04,0xE2,0xF6,0x4A,0x29,0x89,0x13,0x60,0xDE,0x53,0xE6,0x3A,0x00,0x0C,0x58,0x4C,0xB2,0x31,0x56,0x6C,0xBB,0x4A,0xD3,0xC3,0xEA,0xD4,0xA1,0xC6,0x4D,0x16,0x67,0x72,0xA4,0xAA,0x34,0x19,0x3C,0x2B,0xD1,0x2A,0xDA,0xC4,0x89,0xE0,0x55,0x19,0xC9,0x62,0x23,0x2A,0xB2,0x33,0x1E,0xAC,0x8B,0xDC,0x89,0x68,0x76,0x30,0x1E,0xAA,0x54,0x31,0x51,0xA4,0x78,0xE8,0xCC,0xF5,0x98,0xA3,0xE3,0xA4,0x83,0xDA,0x6D,0x06,0x8D,0x93,0xA9,0xB9,0x67,0x85,0xA5,0x4E,0x6A,0xD3,0xA2,0x61,0x6A,0x27,0xA9,0xCD,0xB3,0x66,0x59,0xE4,0xE6,0xE0,0x50,0x65,0xA2,0x73,0x86,0x27,0x62,0x04,0xA9,0x4D,0x9E,0x41,0x0B,0x64,0x0A,0x47,0xF5,0x29,0x23,0x30,0x21,0x9C,0x4C,0x9A,0x8C,0xC0,0x27,0x37,0x36,0x5C,0x32,0x02,0x5F,0xC4,0x4C,0x70,0x4E,0xF3,0x5D,0x65,0x0D,0xA5,0xD9,0xC5,0x37,0x8D,0xA4,0x0C,0x67,0x67,0xDF,0x79,0xAC,0x53,0x8C,0xD0,0x6C,0x62,0x83,0xCD,0xB9,0xCA,0x4D,0xFF};

void setup() 
{
  pinMode(led,OUTPUT);
  
  Serial.begin(9600); // PC와 아두이노간 시리얼 통신속도를 9600bps로 설정
  BT.begin(9600); // 블루투스와 아두이노간 시리얼 통신속도를 9600bps로 설정
 // SPI.begin();                                // SPI 초기화
                                              // (SPI : 하나의 마스터와 다수의 SLAVE(종속적인 역활)간의 통신 방식)
 //mfrc.PCD_Init();
 }
 
void loop()
{
// byte data = BT.read();
 
  if(BT.available())
    Serial.write(BT.read());
  if (Serial.available()) {          // 시리얼 모니터로부터 받은 데이터가 있으면
    BT.write(Serial.read());  // 블루투스로 전송
  }
 /*
 if(data == 'p')
  {
    digitalWrite(led,HIGH);
   // voice.say(pregnentNear);
    delay(2000);
  }
   
 if ( !mfrc.PICC_IsNewCardPresent() || !mfrc.PICC_ReadCardSerial() ) {   
                                               // 태그 접촉이 되지 않았을때 또는 ID가 읽혀지지 않았을때
    delay(500);                                // 0.5초 딜레이 
    return;                                    // return
  }
    
  //Serial.print("Card UID:");                  // 태그의 ID출력
  
 for (byte i = 0; i < 4; i++) {               // 태그의 ID출력하는 반복문.태그의 ID사이즈(4)까지
    Serial.print(mfrc.uid.uidByte[i]);
    if(mfrc.uid.uidByte[0] == 89 && mfrc.uid.uidByte[1] == 47)
    {
    digitalWrite(led,LOW);
    }// mfrc.uid.uidByte[0] ~ mfrc.uid.uidByte[3]까지 출력
    Serial.print(" ");  
    // id 사이의 간격 출력
  }

   Serial.println();
 /*if(mfrc.uid.uidByte[0] == 89 && mfrc.uid.uidByte[1] == 47)
  {
    digitalWrite(led,LOW);
    }
 Serial.println(); 
 */
 //while(bluetooth.available()) { // 블루투스로부터 받은 데이터가 있으면
    //Serial.write(bluetooth.read()); 
 
   //myString += myChar;
    // delay(5);
     //Serial.println(myChar);
 // }
 // if(!myString.equals("")){
   //      Serial.println("input value" + myString);
   /* if(data == 'y'){
      digitalWrite(led,HIGH);
      //delay(1000);
    }else if (data == 'n'){
        digitalWrite(led,LOW);
     }*/ 
 // myString ="";
  //}
}

